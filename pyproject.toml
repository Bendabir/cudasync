# --- poetry ---
[tool.poetry]
package-mode = false
description = "Experiments with PyTorch, CUDA and async code."
license = "GPL-3.0-or-later"
authors = ["Bendabir"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
typing-extensions = "^4.11.0"
opencv-python = "^4.9.0.80"
httpx = "^0.27.0"
certifi = "^2024.07.04"       # Pinned for security
trio = "^0.26.0"
anyio = "^4.3.0"
tqdm = "^4.66.3"
joblib = "^1.4.0"
plotly = "^5.20.0"
nbformat = "^5.10.4"
pandas = "^2.2.2"
torch = "^2.4.1"
jinja2 = "^3.1.4"             # Pinned for security
setuptools = "^70.0.0"        # Pinned for security
torchvision = "^0.19.1"
cyclopts = "^2.9.9"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
wheel = "^0.44.0"
poetry-plugin-export = "^1.6.0"
requests = "^2.32.0"            # Pinned for security
urllib3 = "^2.2.2"              # Pinned for security
cryptography = "^43.0.1"        # Pinned for security
pre-commit = "^3.6.0"
black = "^24.2.0"
ruff = "^0.6.4"
mypy = "^1.11.0"
mypypp = "^0.1.0"
types-tqdm = "^4.66.0.20240106"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# --- black ---
[tool.black]
line-length = 88
target-version = ["py311"]
preview = false

# --- mypy ---
[tool.mypy]
local_partial_types = true
python_version = "3.11"
show_error_codes = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
implicit_optional = false
strict_equality = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
warn_unused_configs = true
enable_error_code = [
    "redundant-self",
    "redundant-expr",
    "possibly-undefined",
    "truthy-bool",
    "truthy-iterable",
    "ignore-without-code",
    "unused-awaitable",
    "explicit-override",
]
plugins = ["mypypp.deprecated"]

# --- ruff ---
[tool.ruff]
line-length = 88
target-version = "py311"
indent-width = 4
preview = true

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "NOTE"]
select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "CPY",   # flake8-copyright
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "NPY",   # numpy rules
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # ruff specific
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRIO",  # flake8-trio
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]
ignore = [
    "ANN401",

    "COM812",

    "D100",
    "D104",
    "D105",

    "N806",

    "TD001",
    "TD002",
    "TD003",

    "TRY003",
]
unfixable = ["ERA001"]

[tool.ruff.lint.per-file-ignores]
"scripts*.py" = ["D101", "D102", "D103", "INP001"]

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true
suppress-dummy-args = true
allow-star-arg-any = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-copyright]
author = "Bendabir"
